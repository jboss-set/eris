---
- name: "Ensure necessary parameters are defined."
  ansible.builtin.assert:
    that:
      - job_name is defined
      - podman_image is defined
      - ansible_version is defined
      - ansible_version.full is defined
      - hera_molecule_slave_sshd_port is defined
      - hera_molecule_slave_sshd_port != 'undefined'
      - workdir is defined
    quiet: true
    fail_msg: "Missing required parameters"

- name: "Display driver infos"
  ansible.builtin.debug:
    msg: "{{ job_name }}: running Molecule test suite with podman image {{ podman_image }} using Ansible v{{ ansible_version.full }}. Dedicated SSH port is {{ hera_molecule_slave_sshd_port }} mapped to 22 on container."

- name: "Check that workdir and HERA_HOME exists."
  ansible.builtin.include_role:
    name: eris_hera_commons
    tasks_from: check_dir.yml
  vars:
    variable_name: "{{ item.variable_name }}"
    directory_path: "{{ item.directory_path }}"
  loop:
    - { variable_name: 'HERA_HOME', directory_path: "{{ hera_home }}" }
    - { variable_name: 'workdir', directory_path: "{{ workdir }}" }

- name: "HERA: run"
  ansible.builtin.command: >
    bash -x {{ hera_home }}/hera.sh run
  args:
    chdir: "{{ workdir }}"
  register: hera_run
  environment:
    BUILD_PODMAN_IMAGE: "{{ podman_image }}"
    JOB_NAME: "{{ job_name }}"
    HERA_HOSTNAME: "olympus"
    HERA_DEBUG: "{{ lookup('env', 'HERA_DEBUG') | default('') }}"
    JENKINS_HOME_DIR: "/home/jenkins/current/"
    CONTAINER_UID: '0'
    CONTAINER_USERNAME: 'root'
    PUBLISHED_PORTS: "{{ hera_molecule_slave_sshd_port }}:22"
    SYSTEMD_ENABLED: True
    CONTAINER_COMMAND: '/usr/sbin/init'
  changed_when: True

- name: "HERA: inspect"
  ansible.builtin.command: >
    bash -x {{ hera_home }}/hera.sh inspect
  args:
    chdir: "{{ workdir }}"
  register: hera_inspect
  environment:
    BUILD_PODMAN_IMAGE: "{{ podman_image }}"
    JOB_NAME: "{{ job_name }}"
    HERA_HOSTNAME: "olympus"
    JENKINS_HOME_DIR: "/home/jenkins/current/"
  when:
    - hera_debug

- name: "Set hera_created_instances"
  ansible.builtin.set_fact:
    hera_created_instances:
      - { address: 'olympus', user: 'root',  port: "{{ hera_molecule_slave_sshd_port }}", identity_file:  '/var/jenkins_home/.ssh/id_rsa' }

- name: "Display hera run stdout"
  ansible.builtin.debug:
    msg: "Container created: {{ hera_run.stdout }}"
  when:
    - hera_debug

- when: True
  block:

    - name: "Ensure hera_created_instances is defined"
      ansible.builtin.assert:
        that:
          - hera_created_instances is defined
        quiet: true

    - name: Populate instance config dict
      ansible.builtin.set_fact:
        instance_conf_dict: {
          'instance': "instance",
          'address': "{{ item.address }}",
          'user': "{{ item.user }}",
          'port': "{{ item.port }}",
          'identity_file': "{{ item.identity_file }}", }
      with_items: "{{ hera_created_instances  }}"
      register: instance_config_dict

    - name: "Display molecule instance config"
      ansible.builtin.debug:
        msg: "Create phase with {{ molecule_instance_config }}"
      when:
        - hera_debug

    - name: "Convert instance config dict to a list"
      ansible.builtin.set_fact:
        instance_conf: "{{ instance_config_dict.results | map(attribute='ansible_facts.instance_conf_dict') | list }}"

    - name: "Dump instance config"
      ansible.builtin.copy:
        content: |
          {{ instance_conf | to_json | from_json | to_yaml }}
        dest: "{{ molecule_instance_config }}"
        mode: '0644'

    - name: "Slurp {{ molecule_instance_config }}"
      ansible.builtin.slurp:
        src: "{{ molecule_instance_config }}"
      register: res_conf

    - name: "Display content of {{ molecule_instance_config }}"
      ansible.builtin.debug:
        msg: "{{ res_conf['content'] | b64decode }}"

    - name: "Wait for {{ wait_for_sshd }}s"
      ansible.builtin.wait_for:
        port: "{{ hera_molecule_slave_sshd_port }}"
        host: 'olympus'
        search_regex: OpenSSH
        delay: "{{ wait_for_sshd }}"
      delegate_to: localhost
